import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { activateSubscription } from "@/api/sellerSubscriptionService";
import { refreshToken } from "@/api/sellerAuthService";
import { toast } from "react-hot-toast";

const plans = [
  {
    id: 1,
    name: "BaÅŸlangÄ±Ã§",
    price: "â‚º0",
    description:
      "MaÄŸazanÄ±zÄ± keÅŸfetmeye baÅŸlayÄ±n, Ã¼rÃ¼nlerinizi listeleyin ve Tedarika'yÄ± deneyimleyin.",
    features: [
      "Ãœcretsiz maÄŸaza aÃ§Ä±lÄ±ÅŸÄ±",
      "SÄ±nÄ±rsÄ±z Ã¼rÃ¼n listeleme",
      "Temel istatistik gÃ¶rÃ¼nÃ¼mÃ¼",
      "Kargo & teslimat entegrasyonu",
      "Temel mÃ¼ÅŸteri mesajlaÅŸma",
    ],
  },
  {
    id: 2,
    name: "Standart",
    price: "â‚º299",
    highlight: true,
    description:
      "MarkanÄ±zÄ± yansÄ±tÄ±n, satÄ±ÅŸlarÄ±nÄ±zÄ± artÄ±rÄ±n ve gÃ¼Ã§lÃ¼ entegrasyonlarla iÅŸinizi bÃ¼yÃ¼tÃ¼n.",
    features: [
      "BaÅŸlangÄ±Ã§ paketine ek olarak:",
      "GeliÅŸmiÅŸ satÄ±ÅŸ raporlarÄ±",
      "Ã–zel maÄŸaza sayfasÄ± & markalama",
      "Stok & fiyat yÃ¶netimi araÃ§larÄ±",
      "SipariÅŸ ve iade yÃ¶netimi",
      "WhatsApp & e-posta entegrasyonu",
      "Mobil panel eriÅŸimi",
    ],
  },
  {
    id: 3,
    name: "Premium",
    price: "â‚º499",
    description:
      "En yÃ¼ksek verimlilik ve otomasyonla Tedarikaâ€™nÄ±n tÃ¼m gÃ¼cÃ¼nden faydalanÄ±n.",
    features: [
      "Standart pakete ek olarak:",
      "Asistan hesabÄ± yÃ¶netimi",
      "Ä°leri dÃ¼zey mÃ¼ÅŸteri analizleri",
      "Kampanya ve indirim yÃ¶netimi",
      "Otomatik fiyat optimizasyonu",
      "Ã–zel destek ve danÄ±ÅŸmanlÄ±k",
    ],
  },
];

export default function SubscriptionPage() {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    const raw = localStorage.getItem("sellerToken");
    if (raw) {
      try {
        const payload = JSON.parse(atob(raw.split(".")[1]));
        const isActive = payload?.SubscriptionActive === true || payload?.SubscriptionActive === "true";

        if (isActive) {
          const hasCompany = payload?.HasCompany === true || payload?.HasCompany === "true";
          navigate(hasCompany ? "/seller/dashboard" : "/seller/company");
        }
      } catch (err) {
        console.error("ğŸ”‘ Token Ã§Ã¶zÃ¼mlenemedi:", err);
      }
    }
  }, [navigate]);

  const handleSubscribe = async (packageId) => {
    try {
      setIsLoading(true);

      await activateSubscription({
        subscriptionPackageId: packageId,
        startDate: new Date().toISOString(),
        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
        paymentReference: "initial-subscription",
      });

      const oldToken = localStorage.getItem("sellerToken");
      if (!oldToken) {
        toast.error("Token bulunamadÄ±");
        setIsLoading(false);
        return;
      }

      const response = await refreshToken({ token: oldToken });
      const newToken = response.token;

      if (newToken) {
        localStorage.setItem("sellerToken", newToken);
        toast.success("Abonelik baÅŸarÄ±yla baÅŸlatÄ±ldÄ±");

        const payload = JSON.parse(atob(newToken.split(".")[1]));
        const hasCompany = payload?.HasCompany === true || payload?.HasCompany === "true";

        setTimeout(() => {
          navigate(hasCompany ? "/seller/dashboard" : "/seller/company");
        }, 800);
      } else {
        toast.error("Yeni token alÄ±namadÄ±");
        setIsLoading(false);
      }
    } catch (err) {
      console.error(err);
      toast.error("Abonelik baÅŸlatÄ±lamadÄ±");
      setIsLoading(false);
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-green-900 text-white text-xl font-semibold">
        Abonelik baÅŸlatÄ±lÄ±yor, lÃ¼tfen bekleyin...
      </div>
    );
  }

  return (
    <section className="py-20 bg-green-900 text-white min-h-screen">
      <div className="max-w-7xl mx-auto px-4 text-center">
        <h2 className="text-4xl font-bold mb-4">SatÄ±ÅŸa GÃ¼Ã§lÃ¼ Bir BaÅŸlangÄ±Ã§ Yap</h2>
        <p className="mb-16 text-lg">
          Ä°ster yeni baÅŸlÄ±yor olun, ister markanÄ±zÄ± bÃ¼yÃ¼tmek isteyin â€” Tedarika sizin iÃ§in burada.
        </p>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {plans.map((plan) => (
            <div
              key={plan.id}
              className={`rounded-2xl shadow-lg p-8 bg-white text-gray-800 transition-all ${
                plan.highlight ? "border-4 border-green-500 scale-105" : "border"
              }`}
            >
              <h3 className="text-xl font-semibold text-green-700">{plan.name}</h3>
              <p className="text-4xl font-bold my-4">
                {plan.price} <span className="text-base font-medium text-gray-600">/ay</span>
              </p>
              <p className="mb-6 text-gray-600">{plan.description}</p>
              <ul className="space-y-2 text-left text-sm text-gray-700">
                {plan.features.map((feature, i) => (
                  <li key={i} className="flex items-start">
                    <span className="text-green-600 font-bold mr-2">âœ”</span>
                    <span>{feature}</span>
                  </li>
                ))}
              </ul>
              <button
                onClick={() => handleSubscribe(plan.id)}
                className="mt-6 w-full bg-green-600 hover:bg-green-700 text-white py-2 rounded-lg font-semibold transition"
              >
                Hemen BaÅŸla
              </button>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
}
